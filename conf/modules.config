/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
/*
    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
*/
    // withName: CUSTOM_DUMPSOFTWAREVERSIONS {
    //     publishDir = [
    //         path: { "${params.outdir}/pipeline_info" },
    //         mode: params.publish_dir_mode,
    //         pattern: '*_versions.yml'
    //     ]
    // }

    withName: MERGEBAMS  {
        cpus   = { check_max( params.merge_bams_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.merge_bams_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.merge_bams_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.merge_bams_args == null ? " " : params.merge_bams_args}

    }

    withName: HAPLOTYPECALLER  {
        cpus   = { check_max( params.haplotypecaller_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.haplotypecaller_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.haplotypecaller_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.haplotypecaller_args == null ? " -G StandardAnnotation -G StandardHCAnnotation -G AS_StandardAnnotation -stand-call-conf 15.0  -GQB 5 -GQB 10 -GQB 15 -GQB 20 -GQB 30 -GQB 40 -GQB 50 -GQB 60  -ERC GVCF " : params.haplotypecaller_args}
        ext.java_options = { params.haplotypecaller_java_options == null ? " " : params.haplotypecaller_java_options}
    }

    withName: MERGEVCFS  {
        cpus   = { check_max( params.mergevcfs_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.mergevcfs_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.mergevcfs_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.mergevcfs_args == null ? " " : params.mergevcfs_args}
        ext.java_options = { params.mergevcfs_java_options == null ? "-Xmx8000m -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 -XX:ParallelGCThreads=2" : params.mergevcfs_java_options}
        publishDir = [
            path: { "${params.outdir}/${sample_id}/haplotypecaller" },
            mode: params.publish_dir_mode
        ]
    }

     withName: VTNORM  {
        cpus   = { check_max( params.vtnorm_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.vtnorm_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.vtnorm_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.vtnorm_args == null ? " -n " : params.vtnorm_args}
        ext.args2 = {""}
        ext.prefix = {""}
        ext.singularity_pull_docker_container = {true}

        publishDir = [
            path: { "${params.outdir}/${sample_id}/vtnorm" },
            mode: params.publish_dir_mode
        ]
    }

    withName: VEP  {
        cpus   = { check_max( params.vep_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.vep_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.vep_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.vep_args == null ? "--vcf --offline --no_progress --canonical --polyphen b --sift b --symbol --numbers --terms SO --biotype  --total_length --fields Consequence,Codons,Amino_acids,Gene,SYMBOL,Feature,INTRON,EXON,PolyPhen,SIFT,Protein_position,BIOTYPE,CANONICAL,Feature_type,cDNA_position,CDS_position,Existing_variation,DISTANCE,STRAND,CLIN_SIG,LoFtool,RadialSVM_score,RadialSVM_pred,LR_score,LR_pred,CADD_raw,CADD_phred,Reliability_index,HGVSc,HGVSp,DOMAINS --hgvs --domains --shift_hgvs 1 --merged --plugin LoFtool --plugin vep_plugins/" : params.vep_args}
        ext.args2 = {""}
        ext.prefix = {""}
        ext.singularity_pull_docker_container = {false}

        publishDir = [
            path: { "${params.outdir}/${sample_id}/vep" },
            mode: params.publish_dir_mode
        ]
    }

    withName: VCFANNO  {
        cpus   = { check_max( params.vcfanno_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.vcfanno_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.vcfanno_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.vcfanno_args == null ? "" : params.vcfanno_args}
        ext.args2 = { params.vcfanno_args2 == null ? "IRELATE_MAX_CHUNK=12000 IRELATE_MAX_GAP=1000" : params.vcfanno_args2}
        ext.prefix = {""}
        ext.singularity_pull_docker_container = {true}

        publishDir = [
            path: { "${params.outdir}/${sample_id}/vcfanno" },
            mode: params.publish_dir_mode
        ]
    }

    withName: VCF2TSV  {
        cpus   = { check_max( params.vcf2tsv_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.vcf2tsv_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.vcf2tsv_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.vcf2tsv_args == null ? "--debug --keep-header --sort --chunksize 250000" : params.vcf2tsv_args}
        ext.prefix = {""}
        ext.singularity_pull_docker_container = {true}

        publishDir = [
            path: { "${params.outdir}/${sample_id}/vcf2tsv" },
            mode: params.publish_dir_mode
        ]
    }

    withName: TABIX  {
        cpus   = { check_max(params.tabix_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(( params.tabix_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(( params.tabix_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.tabix_args == null ? " -p vcf " : params.tabix_args}
        ext.prefix = {""}
    }
}
